---
title: "Call of Duty Data Examples"
author: "Matt Slifko"
format: html
editor: visual
---

## Preliminaries

```{r}
#Delete all objects in Environment (use with caution)
remove(list = ls()) 

#Load libraries
library(tidyverse)

#Read datasets into Environment
CODGames1 <- read.csv(file = "https://raw.githubusercontent.com/matthewdslifko/CallOfDutyProject/main/CODGames1SP.csv", header = TRUE)
CODGames2 <- read.csv(file = "https://raw.githubusercontent.com/matthewdslifko/CallOfDutyProject/main/CODGames2SP.csv", header = TRUE)
GameModes <- read.csv(file = "https://raw.githubusercontent.com/matthewdslifko/CallOfDutyProject/main/CODGameModes.csv", header = TRUE)
Maps <- read.csv(file = "https://raw.githubusercontent.com/matthewdslifko/CallOfDutyProject/main/CODMaps.csv", header = TRUE)
Weapons <- read.csv(file = "https://raw.githubusercontent.com/matthewdslifko/CallOfDutyProject/main/CODWeapons.csv", header = TRUE)

```

## Example 1 - Exploratory Data Analysis (EDA) and Processing Character Data

#### Discussion Opportunities

This example provides an opportunity to discuss the following ideas:

-   data visualization

-   the process of data exploration

-   complementary roles of visualization and numerical summaries

-   annotating plots with text

-   character string processing and new variable creation

-   multivariable thinking

#### Background Information

Begin by providing students with some information about the variable of interest: The variable `Damage` represents the amount of damage issued by the player on the opposing team's players, weapons, and vehicles.

#### Initial Task and Exploration

Instruction for students: Explore the distribution of `Damage`.

Initial Exploration: *For this problem, use the larger dataset, `CODGames2`*. Students will recognize the variable of interest, `Damage`, as quantitative. This may prompt students to create a boxplot, histogram, or some other type of plot that is appropriate for exploring the distribution of a single quantitative variable. We start with a boxplot.

```{r}
#Create Boxplot
ggplot(data = CODGames2, mapping = aes(y = Damage)) + 
  geom_boxplot() +
  labs(y = "Damage")
```

I like to take this opportunity to remind students that the x-axis labels on this boxplot are not helpful and should be suppressed. As the code required to do this may not have been covered in class, I might suggest that students try a Google search such as "remove x axis boxplot ggplot r". One solution is shown below.

```{r}
ggplot(data = CODGames2, mapping = aes(y = Damage)) + 
  geom_boxplot() +
  labs(y = "Damage") + 
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
```

Since a boxplot reduces the distribution to 5 numbers (and outliers), we might not be a getting a full picture of the distribution based on the boxplot. A histogram or violin plot might provide more detail.

```{r}
#Create Histogram
ggplot(data = CODGames2, mapping = aes(x = Damage)) +
  geom_histogram(fill = "lightgreen", color = "black") +
  labs(x = "Damage",
       y = "Number of Games")
```

*Important Discussion Point*: The end goal of EDA is not to create the visualization. Instead we want to learn something about the variable(s). In this case, we can see that the distribution is clearly bimodel with some outliers on the high end of the distribution.

(Optional) For the sake presentations, I like to remind students that it is often helpful to annotate plots. For instance, I might want to call attention to the 2 highest bins. One way to accomplish this is demonstrated below. The annotate commands are partially automated but require some trial and error when determining coordinates.

```{r}
#Store the histogram as an object
histPlot <- ggplot(data = CODGames2, mapping = aes(x = Damage)) +
  geom_histogram(fill = "lightgreen", color = "black") +
  labs(x = "Damage",
       y = "Number of Games") 

#Extract data used to create the histogram
histDat <- layer_data(histPlot)

#Sort the bins by the count variable and select the 2 highest counts
histDatModes <- 
  histDat %>%
  arrange(desc(count)) %>%
  head(2)

#Recreate the histogram; add open circles (shape = 1) to callout modes (stroke controls thickness of of circle borders) and annotate with line segments
ggplot(data = CODGames2, mapping = aes(x = Damage)) +
  geom_histogram(fill = "lightgreen", color = "black") +
  labs(x = "Damage",
       y = "Number of Games") +
  geom_point(data = histDatModes, mapping = aes(x = x, y = count),
             shape = 1, size = 8, stroke = 2) +
  annotate("segment", x = 5000, 
           xend = histDatModes$x[1] + (histDatModes$xmax[1] - histDatModes$xmin[1]), 
           y = 137.5, yend = histDatModes$count[1],
           color = "black", size = 2, arrow = arrow()) + 
  annotate("segment", x = 5000, 
           xend = histDatModes$x[2] + (histDatModes$xmax[2] - histDatModes$xmin[2]), 
           y = 125, yend = histDatModes$count[2],
           color = "black", size = 2, arrow = arrow()) +
  annotate("text", x = 5200, y = 128, 
           label = "Bimodal distribution. What other \nvariables might affect \nthe distribution?",
           hjust = 0)
```

At this time, I might ask students to think about other variables, either included in the dataset or not, might affect the distribution of `Damage`. Students often respond by suggesting that the primary weapon (`PrimaryWeapon`) might have an impact since different weapons do different amounts of damage. This is a good answer, but there is a better answer.

#### Further Background

After students have considered other variables that could impact the distribution of `Damage`, I will share the following background information: Some values in the `GameType` variable contain an "HC" designation. In the lingo of the game, this is meant to distinguish "Core" games from "Hardcore" games. Unlike Core games, players start with less health and health does not regenerate. Thus, there is less opportunity to deal damage in "HC" game modes.

#### Revised Task and Exploration

Instruction for students: Explore the distribution of `Damage` after accounting for whether the game is Core or HardCore.

Revised Exploration: One approach for this situation is to create a new variable called Mode. The code below handles this by using the `grepl()` function to determine if `GameType` contains "HC".

```{r}
#Create Variable named Core
CODGames2 <- 
  CODGames2 %>%
  mutate(Mode = ifelse(grepl("HC - ", GameType, ignore.case = FALSE), "HardCore", "Core"))
```

```{r}
#Create Histogram of Damage Incorporating Core
ggplot(data = CODGames2, mapping = aes(x = Damage, fill = Mode)) +
  geom_histogram(color = "black", alpha = 0.5, position = "identity") +
  scale_fill_manual(values=c("#54B6E9", "#D55E00")) + 
  labs(y = "Number of Games",
       fill = "Mode")
```

Based on this plot, it is clear that `Damage` is a mixture of 2 distributions. The larger values of `Damage` occur during the Core games, while the HardCore games correspond to the lower values. To support this, we can calculate some summary statistics and add them to the plot.

```{r}
#Calculate summary stats of Damage for each level of Mode
DamageSummary <-
  CODGames2 %>%
  group_by(Mode) %>%
  summarize(Mean = mean(Damage, na.rm = TRUE),
            StdDev = sd(Damage, na.rm = TRUE))

#Create Histogram of Damage Incorporating Core and add summary stats
ggplot(data = CODGames2, mapping = aes(x = Damage, fill = Mode)) +
  geom_histogram(color = "black", alpha = 0.5, position = "identity") +
  scale_fill_manual(values=c("#54B6E9", "#D55E00")) + 
  labs(y = "Number of Games",
       fill = "Mode") +
  annotate("text", x = 6000, y = 130, 
           label= paste("Core Mean Damage = ", round(DamageSummary$Mean[1], digits=0))) +
  annotate("text", x = 6000, y = 120, 
           label= paste("Core SD Damage = ", round(DamageSummary$StdDev[1], digits=0)))+
  annotate("text", x = 6000, y = 100, 
           label= paste("Hardcore Mean Damage = ", round(DamageSummary$Mean[2],digits=0))) +
  annotate("text", x = 6000, y = 90, 
           label= paste("Hardcore SD Damage = ", round(DamageSummary$StdDev[2], digits=0)))
```

## Useful Resource

\[R Graphics Cookbook (Chang)\] \[http://r-graphics.org/index.html\]
